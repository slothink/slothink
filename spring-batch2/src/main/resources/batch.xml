<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:oxm="http://www.springframework.org/schema/oxm"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.0.4.xsd
http://www.springframework.org/schema/task
http://www.springframework.org/schema/task/spring-task-3.0.xsd
http://www.springframework.org/schema/cache
http://www.springframework.org/schema/cache/spring-cache.xsd
http://www.springframework.org/schema/util
http://www.springframework.org/schema/util/spring-util-3.1.xsd
http://www.springframework.org/schema/oxm
http://www.springframework.org/schema/oxm/spring-oxm.xsd
http://www.springframework.org/schema/batch
http://www.springframework.org/schema/batch/spring-batch-2.2.xsd">

    <context:property-placeholder location="classpath:batch.properties" />
    <util:properties id="ecmProperties" location="classpath:batch.properties" />

    <context:annotation-config></context:annotation-config>


    <!-- Database -->
    <tx:annotation-driven transaction-manager="transactionManager"  />

    <!-- JPA -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

    <!-- JPA/JNDI
    <jee:jndi-lookup id="emf" jndi-name="persistence/myPersistentceUnit"></jee:jndi-lookup>
    -->
    <bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="persistenceXmlLocation" value="classpath:META-INF/ecm-persistence.xml" />

        <!--<property name="persistenceXmlLocation" value="/META-INF/spring-persistence.xml"></property>-->

        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <!--<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>-->
                <prop key="hibernate.default_schema">ecm</prop>
                <prop key="hibernate.current_session_context_class">thread</prop>
                <!--<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>-->
                <prop key="hibernate.jdbc.use_streams_for_binary">false</prop>
                <prop key="hibernate.default_schema">${hibernate.default_schema}</prop>
                <!--
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</pop>

                <prop key="hibernate.connection.isolation">1</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>

                -->
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <!--<prop key="javax.persistence.transactionType" >jta</prop>-->
                <!--<prop key="hibernate.transaction.manager_lookup_class" >com.atomikos.icatch.jta.hibernate3.TransactionManagerLookup</prop>-->
            </props>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl"><value>true</value></property>
                <property name="showSql"><value>${hibernate.show_sql}</value></property>
            </bean>
        </property>
        <property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="emf" />
    </bean>

    <!--
    ###############################################################################
    # Data Source : DBCP
    ###############################################################################
    -->

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}" />
        <property name="maxIdle" value="${jdbc.maxIdle}" />
        <property name="validationQuery" value="${jdbc.validationQuery}" />
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
    </bean>

    <!--<aop:config>-->
        <!--<aop:advisor pointcut="execution(* org.springframework.batch.core..*Repository+.*(..))" advice-ref="txAdvice" />-->
    <!--</aop:config>-->

    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="*" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->


    <!-- Batch -->

    <!--<job id="myJob">-->
        <!--<step id="step1".../>-->
        <!--<step id="step2".../>-->
    <!--</job>-->

    <!--<beans:bean id="transactionManager".../>-->



    <!--isolation-level-for-create="SERIALIZABLE"-->
    <!--isolation-level-for-create="READ_COMMITTED"-->
    <batch:job-repository id="jobRepository"
                    data-source="dataSource"
                    transaction-manager="transactionManager"
                    isolation-level-for-create="DEFAULT"
                    table-prefix="ECM_BATCH_"
                    max-varchar-length="1000"
            />

    <!-- In-Memory Repository
    <bean id="jobRepository"
          class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    -->

    <bean id="jobLauncher"
          class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
        <!--
        <property name="taskExecutor">
            <bean class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
        </property>
        -->
    </bean>

    <bean id="jobExplorer" class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean"
            p:dataSource-ref="dataSource"
            p:tablePrefix="ECM_BATCH_"
            >
    </bean>

    <!-- Batch Sample Jobs -->

    <batch:job id="endOfDay">
        <batch:step id="step1">
            <batch:tasklet transaction-manager="transactionManager">
                <batch:chunk reader="expressionItemReader" processor="expressionItemProcessor" writer="expressionItemWriter" commit-interval="1" />
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <bean id="expressionItemReader" class="com.slothink.spring.batch2.ExpressionItemReader" />
    <bean id="expressionItemWriter" class="com.slothink.spring.batch2.ExpressionItemWriter" />
    <bean id="expressionItemProcessor" class="com.slothink.spring.batch2.ExpressionItemProcessor" />




</beans>